{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"allowance(address,address)": {
					"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
				},
				"approve(address,uint256)": {
					"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
				},
				"balanceOf(address)": {
					"details": "Returns the value of tokens owned by `account`."
				},
				"totalSupply()": {
					"details": "Returns the value of tokens in existence."
				},
				"transfer(address,uint256)": {
					"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
				},
				"transferFrom(address,address,uint256)": {
					"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"RUSD-Bridge-MaalChain/TokenBridge.sol": "IERC20Detailed"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"RUSD-Bridge-MaalChain/AccessControl.sol": {
			"keccak256": "0x2f8850bb8333bbe4c4b6c455e2f0903e4ef8cc621bf2353a6de6b8bd9691c5b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://7e2fdd2dfe1079477e57e25c371123c46f8a92e1dc41a9b150da5c691e0a8c4a",
				"dweb:/ipfs/QmTy1KS9CyNUJQX3gPqBNN2uZ35yVZXSc5MwrymL1r4VPC"
			]
		},
		"RUSD-Bridge-MaalChain/Address.sol": {
			"keccak256": "0x11af1067f54637ed0d29e3ad2dbc05deec9b23a6fc162dd4a8b3fbd33781ba57",
			"license": "MIT",
			"urls": [
				"bzz-raw://dacc65e26db7d9c2f8b7d1bc75e143ac85fb021a4587eeb0c81e974095b6ef0b",
				"dweb:/ipfs/QmPgAcAYNeW8D9z49P7VW21Xs94FPoUuMsB1Rt5nqjcg21"
			]
		},
		"RUSD-Bridge-MaalChain/Context.sol": {
			"keccak256": "0x305a23fe85a11c00df1a504d64f1390400bbd4b9d8130d7a11cd60d1f7e55e67",
			"license": "MIT",
			"urls": [
				"bzz-raw://685be1be3346261bc8414d175f153c87cc428c4768aec45a553681e9e5ce242d",
				"dweb:/ipfs/QmarFuPXjBw6gT3MkEj1rZj45dbEkkPXrxwAsvxD9voP36"
			]
		},
		"RUSD-Bridge-MaalChain/ERC165.sol": {
			"keccak256": "0x83e7a6d7614c5d2ca852b77a937f40cdc6832b3c9bf4504607824ca49536bde0",
			"license": "MIT",
			"urls": [
				"bzz-raw://cc9f9ec4495f7a5f630a7570c0d3795a289e1ffd83f0b47d98aa60d8f1d7f2e1",
				"dweb:/ipfs/QmWYrJUkeJsYniH9jwt8k4v3XqJ8vkaY7TiTX3fj5hdjVT"
			]
		},
		"RUSD-Bridge-MaalChain/Errors.sol": {
			"keccak256": "0xccb0653ac1441816f0d77a415f1c07335f2992f25d0e1f9c90c8ada7489970ba",
			"license": "MIT",
			"urls": [
				"bzz-raw://023a7cd77cd9c887751ad1790b04cb302f6b556d58a90aeb0753445a92173c8c",
				"dweb:/ipfs/QmTiZ6sXuYGBodLVaMZ1oVF2PddQ2usNpiQNJHPgVP2MMr"
			]
		},
		"RUSD-Bridge-MaalChain/IAccessControl.sol": {
			"keccak256": "0x39f1c75f7ae3f2729ffbb15c80f9e950fbe1c997074d343c62d73f3fc864bc54",
			"license": "MIT",
			"urls": [
				"bzz-raw://8a3c7ee81e81f0ec8847d00f97a73d75bdcb9f3ef600fd585f34ef9a27c78a97",
				"dweb:/ipfs/QmXzueUpzWuca2dKeQ9DbjKuTNVHKYT96eoH12bZC2ZiLm"
			]
		},
		"RUSD-Bridge-MaalChain/IERC1363.sol": {
			"keccak256": "0xf7e43525e899047c7c06f43ab3f9e3180f292a65f79abd5727cacf65dbb3c0b3",
			"license": "MIT",
			"urls": [
				"bzz-raw://641cbdad4c08e758e54d49e8a310ce5c38be2ae87d5e703116d18b71978cdbb6",
				"dweb:/ipfs/QmaXVsg9MjXZ9iNRVhf3sUvAXHMXQR4YvjyBc68Uc8BeXt"
			]
		},
		"RUSD-Bridge-MaalChain/IERC165.sol": {
			"keccak256": "0xe210951fd55bdea7877fe678aca7241a511b5405be2379a127628117e488f569",
			"license": "MIT",
			"urls": [
				"bzz-raw://b5af04ab6d4a256b5a11a0025132d73564666e4d1a389ea7fced7bf071a08ce1",
				"dweb:/ipfs/QmQfrUiQPL22Nib3Q12FqJtGhxGq1kCrZyopYNMRENtUtn"
			]
		},
		"RUSD-Bridge-MaalChain/IERC20.sol": {
			"keccak256": "0x40b023011508dd11d609419d2d68b0a1695afa480dd0a37cd0c4c449e84be028",
			"license": "MIT",
			"urls": [
				"bzz-raw://a312f5cf92f661c026bc64244e2c1a9b8c9a52e4475b61760acd423a3e061ef1",
				"dweb:/ipfs/QmZSkkEX2BBBosB6uFivLAwWH6snSpvKWT7hpgfZ3DhoDo"
			]
		},
		"RUSD-Bridge-MaalChain/Pausable.sol": {
			"keccak256": "0xa3d4f3e92e25b2426c63264d31c646cff4dfce7e7b652849d5cde46e04413938",
			"license": "MIT",
			"urls": [
				"bzz-raw://96cf6b7e333debd6c2a84ef38229c3a573bf15c82cae05d9f20d18c91c2a9c80",
				"dweb:/ipfs/QmbPtovjiN1VWm8hrpAovqXPBMzhq4G9XHRhskA3hS96vJ"
			]
		},
		"RUSD-Bridge-MaalChain/ReentrancyGuard.sol": {
			"keccak256": "0x79faea8a0af68ea11c0ce19c379f41b7a4106f7c19745733f71628a1c33dbe54",
			"license": "MIT",
			"urls": [
				"bzz-raw://a275e62e5bff8756bb0e0441aefe4e9ff4a471a91e6da585bdd643c905bcdfcf",
				"dweb:/ipfs/QmWS4Hs4TxGHLKgMoHdJePao6xu8tDvguvaarzagHourLK"
			]
		},
		"RUSD-Bridge-MaalChain/SafeERC20.sol": {
			"keccak256": "0xa5468fd7dd662db14cf62a0be22c85af3b0f04692f216a047b67afb4386bc8b1",
			"license": "MIT",
			"urls": [
				"bzz-raw://0de8930815c3b8459d2a5ee4a331fd55e578cef308db3129fd36c605923195a9",
				"dweb:/ipfs/QmWEqdzvLZXVofnH8a9QHgRXS9cixZsQte8qfD1P4df2BH"
			]
		},
		"RUSD-Bridge-MaalChain/TokenBridge.sol": {
			"keccak256": "0x0e5fcea2996d8705416aeacb5257c67eaf2e858a274b69ac6987d3a796417c65",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://bdc475d32b97850e5226e2b4dcb8291f3ef897c2f13ee2d4b9d394c6c0b7525e",
				"dweb:/ipfs/QmYmn8ePnx9dMnCBW4SJno5KKVA4wUkcMFv2rQAgDkv92k"
			]
		}
	},
	"version": 1
}